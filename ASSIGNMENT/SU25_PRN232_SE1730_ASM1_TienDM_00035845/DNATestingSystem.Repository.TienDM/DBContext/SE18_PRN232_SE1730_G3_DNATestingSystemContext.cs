// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DNATestingSystem.Repository.TienDM.Models;

public partial class SE18_PRN232_SE1730_G3_DNATestingSystemContext : DbContext
{
    public SE18_PRN232_SE1730_G3_DNATestingSystemContext()
    {
    }

    public SE18_PRN232_SE1730_G3_DNATestingSystemContext(DbContextOptions<SE18_PRN232_SE1730_G3_DNATestingSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppointmentStatusesTienDm> AppointmentStatusesTienDms { get; set; }

    public virtual DbSet<AppointmentsTienDm> AppointmentsTienDms { get; set; }

    public virtual DbSet<ProfileRelationshipThinhLc> ProfileRelationshipThinhLcs { get; set; }

    public virtual DbSet<ProfileThinhLc> ProfileThinhLcs { get; set; }

    public virtual DbSet<SampleThinhLc> SampleThinhLcs { get; set; }

    public virtual DbSet<SampleTypeThinhLc> SampleTypeThinhLcs { get; set; }

    public virtual DbSet<ServiceCategoriesNhanVt> ServiceCategoriesNhanVts { get; set; }

    public virtual DbSet<ServicesNhanVt> ServicesNhanVts { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //=> optionsBuilder.UseSqlServer("Data Source=LAPTOP-09C40UJD\\SQLEXPRESS;Initial Catalog=SE18_PRN232_SE1730_G3_DNATestingSystem;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");
        => optionsBuilder.UseSqlServer(GetConnectionString());

    private String GetConnectionString()
    {
        IConfiguration config = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", true, true)
            .Build();
        return config.GetConnectionString("DefaultConnection");

    }


    //public static string GetConnectionString(string connectionStringName)
    //{
    //    var config = new ConfigurationBuilder()
    //        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
    //        .AddJsonFile("appsettings.json")
    //        .Build();

    //    string connectionString = config.GetConnectionString(connectionStringName);
    //    return connectionString;
    //}

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //    => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AppointmentStatusesTienDm>(entity =>
        {
            entity.HasKey(e => e.AppointmentStatusesTienDmid).HasName("PK__Appointm__3E14D3697A6501AA");

            entity.ToTable("AppointmentStatusesTienDM");

            entity.Property(e => e.AppointmentStatusesTienDmid).HasColumnName("AppointmentStatusesTienDMID");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppointmentsTienDm>(entity =>
        {
            entity.HasKey(e => e.AppointmentsTienDmid).HasName("PK__Appointm__590F50BC75665F87");

            entity.ToTable("AppointmentsTienDM");

            entity.Property(e => e.AppointmentsTienDmid).HasColumnName("AppointmentsTienDMID");
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentStatusesTienDmid).HasColumnName("AppointmentStatusesTienDMID");
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsPaid).HasDefaultValue(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SamplingMethod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServicesNhanVtid).HasColumnName("ServicesNhanVTID");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

            entity.HasOne(d => d.AppointmentStatusesTienDm).WithMany(p => p.AppointmentsTienDms)
                .HasForeignKey(d => d.AppointmentStatusesTienDmid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Appointme__Appoi__656C112C");

            entity.HasOne(d => d.ServicesNhanVt).WithMany(p => p.AppointmentsTienDms)
                .HasForeignKey(d => d.ServicesNhanVtid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppointmentsTienDM_Services");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.AppointmentsTienDms)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Appointme__UserA__6477ECF3");
        });

        modelBuilder.Entity<ProfileRelationshipThinhLc>(entity =>
        {
            entity.HasKey(e => e.ProfileRelationshipThinhLcid).HasName("PK__ProfileR__46E9B9D4AA74E4C4");

            entity.ToTable("ProfileRelationshipThinhLC");

            entity.Property(e => e.ProfileRelationshipThinhLcid).HasColumnName("ProfileRelationshipThinhLCID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.ProfileThinhLcid1).HasColumnName("ProfileThinhLCID1");
            entity.Property(e => e.ProfileThinhLcid2).HasColumnName("ProfileThinhLCID2");
            entity.Property(e => e.RelationshipType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ProfileThinhLcid1Navigation).WithMany(p => p.ProfileRelationshipThinhLcProfileThinhLcid1Navigations)
                .HasForeignKey(d => d.ProfileThinhLcid1)
                .HasConstraintName("FK__ProfileRe__Profi__05D8E0BE");

            entity.HasOne(d => d.ProfileThinhLcid2Navigation).WithMany(p => p.ProfileRelationshipThinhLcProfileThinhLcid2Navigations)
                .HasForeignKey(d => d.ProfileThinhLcid2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProfileRe__Profi__06CD04F7");
        });

        modelBuilder.Entity<ProfileThinhLc>(entity =>
        {
            entity.HasKey(e => e.ProfileThinhLcid).HasName("PK__ProfileT__D11462A46F6ED716");

            entity.ToTable("ProfileThinhLC");

            entity.HasIndex(e => e.NationalId, "UQ_ProfileThinhLC_NationalID").IsUnique();

            entity.Property(e => e.ProfileThinhLcid).HasColumnName("ProfileThinhLCID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NationalId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NationalID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.ProfileThinhLcs)
                .HasForeignKey(d => d.UserAccountId)
                .HasConstraintName("FK__ProfileTh__UserA__01142BA1");
        });

        modelBuilder.Entity<SampleThinhLc>(entity =>
        {
            entity.HasKey(e => e.SampleThinhLcid).HasName("PK__SampleTh__078B503773B7603C");

            entity.ToTable("SampleThinhLC");

            entity.Property(e => e.SampleThinhLcid).HasColumnName("SampleThinhLCID");
            entity.Property(e => e.AppointmentsTienDmid).HasColumnName("AppointmentsTienDMID");
            entity.Property(e => e.CollectedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.ProfileThinhLcid).HasColumnName("ProfileThinhLCID");
            entity.Property(e => e.SampleTypeThinhLcid).HasColumnName("SampleTypeThinhLCID");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.AppointmentsTienDm).WithMany(p => p.SampleThinhLcs)
                .HasForeignKey(d => d.AppointmentsTienDmid)
                .HasConstraintName("FK__SampleThi__Appoi__151B244E");

            entity.HasOne(d => d.ProfileThinhLc).WithMany(p => p.SampleThinhLcs)
                .HasForeignKey(d => d.ProfileThinhLcid)
                .HasConstraintName("FK__SampleThi__Profi__1332DBDC");

            entity.HasOne(d => d.SampleTypeThinhLc).WithMany(p => p.SampleThinhLcs)
                .HasForeignKey(d => d.SampleTypeThinhLcid)
                .HasConstraintName("FK__SampleThi__Sampl__14270015");
        });

        modelBuilder.Entity<SampleTypeThinhLc>(entity =>
        {
            entity.HasKey(e => e.SampleTypeThinhLcid).HasName("PK__SampleTy__4B9B39CE7BABD374");

            entity.ToTable("SampleTypeThinhLC");

            entity.HasIndex(e => e.TypeName, "UQ_SampleTypeThinhLC_TypeName").IsUnique();

            entity.Property(e => e.SampleTypeThinhLcid).HasColumnName("SampleTypeThinhLCID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceCategoriesNhanVt>(entity =>
        {
            entity.HasKey(e => e.ServiceCategoryNhanVtid).HasName("PK__ServiceC__F96A229DD6B0FC05");

            entity.ToTable("ServiceCategoriesNhanVT");

            entity.Property(e => e.ServiceCategoryNhanVtid).HasColumnName("ServiceCategoryNhanVTID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<ServicesNhanVt>(entity =>
        {
            entity.HasKey(e => e.ServicesNhanVtid).HasName("PK__Services__049747BF2E544DEE");

            entity.ToTable("ServicesNhanVT");

            entity.Property(e => e.ServicesNhanVtid).HasColumnName("ServicesNhanVTID");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsClinicVisitAllowed).HasDefaultValue(false);
            entity.Property(e => e.IsHomeVisitAllowed).HasDefaultValue(false);
            entity.Property(e => e.IsSelfSampleAllowed).HasDefaultValue(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Price)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 2)");
            entity.Property(e => e.ServiceCategoryNhanVtid).HasColumnName("ServiceCategoryNhanVTID");
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

            entity.HasOne(d => d.ServiceCategoryNhanVt).WithMany(p => p.ServicesNhanVts)
                .HasForeignKey(d => d.ServiceCategoryNhanVtid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServicesN__Servi__71D1E811");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.ServicesNhanVts)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServicesN__UserA__72C60C4A");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId).HasName("PK__UserAcco__DA6C70BA938DF71D");

            entity.ToTable("UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequestCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}