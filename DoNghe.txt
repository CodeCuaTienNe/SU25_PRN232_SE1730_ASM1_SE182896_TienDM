/*
================================================================================
.NET API DEVELOPMENT NOTES - COMPREHENSIVE GUIDE
================================================================================
Student: IT Student
Subject: .NET API Development
Date: June 2025

Table of Contents:
1. NUGET PACKAGES & DEPENDENCIES
2. DATABASE CONFIGURATION
3. GENERIC REPOSITORY PATTERN
4. JWT AUTHENTICATION & AUTHORIZATION
5. API CONTROLLERS
6. MVC FRONTEND INTEGRATION
7. AJAX & JAVASCRIPT INTEGRATION
8. HTML FORMS & UI COMPONENTS
================================================================================
*/

// ============================================================================
// 1. NUGET PACKAGES & DEPENDENCIES
// ============================================================================

/*
Essential NuGet Packages for .NET API Development
Run these commands in Package Manager Console or Terminal
*/

// Entity Framework Core packages
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.5

// Configuration packages
dotnet add package Microsoft.Extensions.Configuration --version 8.0.0
dotnet add package Microsoft.Extensions.Configuration.Json --version 8.0.0

// JWT Authentication packages
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.10
dotnet add package System.IdentityModel.Tokens.Jwt --version 8.3.0

// ============================================================================
// 2. DATABASE CONFIGURATION
// ============================================================================

// 2.1 Connection String Helper Method
public static string GetConnectionString(string connectionStringName)
{
    var configurationBuilder = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json")
        .Build();

    string connectionString = configurationBuilder.GetConnectionString(connectionStringName);
    return connectionString;
}

// 2.2 DbContext Configuration
protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder
        .UseSqlServer(GetConnectionString("DefaultConnection"))
        .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

// 2.3 Connection String in appsettings.json
/*
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=YOUR_SERVER;Database=YOUR_DATABASE;Trusted_Connection=true;TrustServerCertificate=true;"
  }
}
*/

// ============================================================================
// 3. GENERIC REPOSITORY PATTERN
// ============================================================================

/// <summary>
/// Generic Repository Pattern Implementation
/// Provides common CRUD operations for all entities
/// </summary>
/// <typeparam name="TEntity">Entity type</typeparam>
public class GenericRepository<TEntity> where TEntity : class
{
    protected readonly ApplicationDbContext _dbContext;

    // 3.1 Constructors
    public GenericRepository()
    {
        _dbContext ??= new ApplicationDbContext();
    }

    public GenericRepository(ApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    // 3.2 READ Operations
    /// <summary>
    /// Get all entities synchronously
    /// </summary>
    public List<TEntity> GetAll()
    {
        return _dbContext.Set<TEntity>().ToList();
    }

    /// <summary>
    /// Get all entities asynchronously
    /// </summary>
    public async Task<List<TEntity>> GetAllAsync()
    {
        return await _dbContext.Set<TEntity>().ToListAsync();
    }

    /// <summary>
    /// Get entity by integer ID
    /// </summary>
    public TEntity GetById(int id)
    {
        return _dbContext.Set<TEntity>().Find(id);
    }

    /// <summary>
    /// Get entity by integer ID asynchronously
    /// </summary>
    public async Task<TEntity> GetByIdAsync(int id)
    {
        return await _dbContext.Set<TEntity>().FindAsync(id);
    }

    /// <summary>
    /// Get entity by string code
    /// </summary>
    public TEntity GetById(string code)
    {
        return _dbContext.Set<TEntity>().Find(code);
    }

    /// <summary>
    /// Get entity by string code asynchronously
    /// </summary>
    public async Task<TEntity> GetByIdAsync(string code)
    {
        return await _dbContext.Set<TEntity>().FindAsync(code);
    }

    /// <summary>
    /// Get entity by GUID
    /// Example GUID: daacb4fb-ff73-46ef-98f1-4af9aab2a30a
    /// Generate at: https://guidgenerator.com/
    /// </summary>
    public TEntity GetById(Guid id)
    {
        return _dbContext.Set<TEntity>().Find(id);
    }

    /// <summary>
    /// Get entity by GUID asynchronously
    /// </summary>
    public async Task<TEntity> GetByIdAsync(Guid id)
    {
        return await _dbContext.Set<TEntity>().FindAsync(id);
    }

    // 3.3 CREATE Operations
    /// <summary>
    /// Create new entity synchronously
    /// </summary>
    public void Create(TEntity entity)
    {
        _dbContext.Add(entity);
        _dbContext.SaveChanges();
    }

    /// <summary>
    /// Create new entity asynchronously
    /// </summary>
    public async Task<int> CreateAsync(TEntity entity)
    {
        _dbContext.Add(entity);
        return await _dbContext.SaveChangesAsync();
    }

    // 3.4 UPDATE Operations
    /// <summary>
    /// Update entity synchronously
    /// Note: Clears change tracker to prevent tracking conflicts
    /// </summary>
    public void Update(TEntity entity)
    {
        // Clear tracking to prevent update conflicts in Entity Framework
        _dbContext.ChangeTracker.Clear();
        var entityTracker = _dbContext.Attach(entity);
        entityTracker.State = EntityState.Modified;
        _dbContext.SaveChanges();
    }

    /// <summary>
    /// Update entity asynchronously
    /// Note: Clears change tracker to prevent tracking conflicts
    /// </summary>
    public async Task<int> UpdateAsync(TEntity entity)
    {
        // Clear tracking to prevent update conflicts in Entity Framework
        _dbContext.ChangeTracker.Clear();
        var entityTracker = _dbContext.Attach(entity);
        entityTracker.State = EntityState.Modified;
        return await _dbContext.SaveChangesAsync();

        /* Alternative implementation with dynamic primary key detection
        try
        {
            // Get primary key dynamically
            var primaryKeyValues = _dbContext.Model.FindEntityType(typeof(TEntity))
                            ?.FindPrimaryKey()
                            ?.Properties
                            ?.Select(property => property.PropertyInfo.GetValue(entity))
                            .ToArray();

            if (primaryKeyValues == null || primaryKeyValues.Length == 0)
                throw new InvalidOperationException("No primary key defined for entity.");

            // Fetch existing entity without tracking
            var existingEntity = await _dbContext.Set<TEntity>().FindAsync(primaryKeyValues);

            if (existingEntity == null) return 0;

            _dbContext.Entry(existingEntity).State = EntityState.Detached; // Prevent tracking conflicts
            _dbContext.Entry(entity).State = EntityState.Modified; // Mark for update

            return await _dbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            return 0;
        }           
         */
    }

    // 3.5 DELETE Operations
    /// <summary>
    /// Remove entity synchronously
    /// </summary>
    public bool Remove(TEntity entity)
    {
        _dbContext.Remove(entity);
        _dbContext.SaveChanges();
        return true;
    }

    /// <summary>
    /// Remove entity asynchronously
    /// </summary>
    public async Task<bool> RemoveAsync(TEntity entity)
    {
        _dbContext.Remove(entity);
        await _dbContext.SaveChangesAsync();
        return true;
    }

    // 3.6 Unit of Work Pattern - Separate operations from saving
    #region Unit of Work Pattern Implementation

    /// <summary>
    /// Prepare entity for creation without saving
    /// </summary>
    public void PrepareCreate(TEntity entity)
    {
        _dbContext.Add(entity);
    }

    /// <summary>
    /// Prepare entity for update without saving
    /// </summary>
    public void PrepareUpdate(TEntity entity)
    {
        var entityTracker = _dbContext.Attach(entity);
        entityTracker.State = EntityState.Modified;
    }

    /// <summary>
    /// Prepare entity for removal without saving
    /// </summary>
    public void PrepareRemove(TEntity entity)
    {
        _dbContext.Remove(entity);
    }

    /// <summary>
    /// Save all prepared changes synchronously
    /// </summary>
    public int Save()
    {
        return _dbContext.SaveChanges();
    }

    /// <summary>
    /// Save all prepared changes asynchronously
    /// </summary>
    public async Task<int> SaveAsync()
    {
        return await _dbContext.SaveChangesAsync();
    }

    #endregion Unit of Work Pattern Implementation
}

// ============================================================================
// 4. JWT AUTHENTICATION & AUTHORIZATION
// ============================================================================

// 4.1 JWT Configuration in appsettings.json
/*
{
  "Jwt": {
    "Key": "your-secret-key-here-at-least-32-characters-long",
    "Issuer": "https://localhost:7075",
    "Audience": "https://localhost:7075"
  }
}
*/

// 4.2 Authentication Controller Implementation
[ApiController]
[Route("api/[controller]")]
public class AuthenticationController : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly IUserAccountService _userAccountService;

    public AuthenticationController(IConfiguration configuration, IUserAccountService userAccountService)
    {            
        _configuration = configuration;
        _userAccountService = userAccountService;
    }

    /// <summary>
    /// User login endpoint
    /// </summary>
    [HttpPost("Login")]
    public async Task<IActionResult> Login([FromBody] LoginRequestDto loginRequest)
    {
        var userAccount = await _userAccountService.ValidateUserCredentials(
            loginRequest.UserName, 
            loginRequest.Password);

        if (userAccount == null)
            return Unauthorized(new { message = "Invalid credentials" });
        
        var jwtToken = GenerateJwtToken(userAccount);
        return Ok(new { token = jwtToken });
    }

    /// <summary>
    /// Generate JWT token for authenticated user
    /// </summary>
    private string GenerateJwtToken(UserAccount userAccount)
    {
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
        var signingCredentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

        var jwtToken = new JwtSecurityToken(
            issuer: _configuration["Jwt:Issuer"],
            audience: _configuration["Jwt:Audience"],
            claims: new Claim[]
            {
                new(ClaimTypes.Name, userAccount.UserName),
                new(ClaimTypes.Email, userAccount.Email ?? ""),
                new(ClaimTypes.Role, userAccount.RoleId.ToString()),                        
            },
            expires: DateTime.Now.AddMinutes(120), // Token expires in 2 hours
            signingCredentials: signingCredentials                
        );

        return new JwtSecurityTokenHandler().WriteToken(jwtToken);
    }
}

// 4.3 Login Request DTO
public sealed record LoginRequestDto(string UserName, string Password);

// 4.4 Program.cs Configuration for JWT
public void ConfigureServices(IServiceCollection services)
{
    // Configure JSON serialization options
    services.AddControllers().AddJsonOptions(options =>
    {   
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.Never;
    });

    // Configure JWT Authentication
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = builder.Configuration["Jwt:Issuer"],
                ValidAudience = builder.Configuration["Jwt:Audience"],
                IssuerSigningKey = new SymmetricSecurityKey(
                    Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
                ClockSkew = TimeSpan.Zero // Remove default 5-minute clock skew
            };
        });

    // Configure Swagger with JWT support
    services.AddSwaggerGen(option =>
    {
        // JWT Configuration for Swagger
        option.DescribeAllParametersInCamelCase();
        option.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
        
        option.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
        {
            In = ParameterLocation.Header,
            Description = "Please enter a valid JWT token",
            Name = "Authorization",
            Type = SecuritySchemeType.Http,
            BearerFormat = "JWT",
            Scheme = "Bearer"
        });
        
        option.AddSecurityRequirement(new OpenApiSecurityRequirement
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    }
                },
                new string[]{}
            }
        });
    });
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    // Enable CORS for cross-origin requests
    app.UseCors(options => options
        .AllowAnyOrigin()
        .AllowAnyMethod()
        .AllowAnyHeader());

    // Authentication and Authorization middleware (order matters!)
    app.UseAuthentication();
    app.UseAuthorization();
}

// ============================================================================
// 5. API CONTROLLERS
// ============================================================================

// 5.1 Example API Controller with CRUD operations
[ApiController]
[Route("api/[controller]")]
[Authorize] // Require authentication for all endpoints
public class ProductsController : ControllerBase
{
    private readonly IProductService _productService;

    public ProductsController(IProductService productService)
    {
        _productService = productService;
    }

    /// <summary>
    /// Get all products
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<ProductDto>>> GetAllProducts()
    {
        var products = await _productService.GetAllProductsAsync();
        return Ok(products);
    }

    /// <summary>
    /// Get product by ID
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<ProductDto>> GetProductById(int id)
    {
        var product = await _productService.GetProductByIdAsync(id);
        
        if (product == null)
            return NotFound($"Product with ID {id} not found");
            
        return Ok(product);
    }

    /// <summary>
    /// Create new product
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<int>> CreateProduct([FromBody] CreateProductDto createProductDto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var productId = await _productService.CreateProductAsync(createProductDto);
        return CreatedAtAction(nameof(GetProductById), new { id = productId }, productId);
    }

    /// <summary>
    /// Update existing product
    /// </summary>
    [HttpPut("{id}")]
    public async Task<ActionResult<int>> UpdateProduct(int id, [FromBody] UpdateProductDto updateProductDto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var rowsAffected = await _productService.UpdateProductAsync(id, updateProductDto);
        
        if (rowsAffected == 0)
            return NotFound($"Product with ID {id} not found");
            
        return Ok(rowsAffected);
    }

    /// <summary>
    /// Delete product
    /// </summary>
    [HttpDelete("{id}")]
    public async Task<ActionResult> DeleteProduct(int id)
    {
        var isDeleted = await _productService.DeleteProductAsync(id);
        
        if (!isDeleted)
            return NotFound($"Product with ID {id} not found");
            
        return NoContent();
    }

    /// <summary>
    /// Advanced search with multiple parameters
    /// Example: GET /api/products/search/ABC123/1000/BankName
    /// </summary>
    [HttpGet("search/{code}/{amountInFigures}/{bankName}")]
    public async Task<ActionResult<IEnumerable<ProductDto>>> SearchProducts(
        string code, 
        decimal amountInFigures, 
        string bankName)
    {
        var searchResults = await _productService.SearchProductsAsync(code, amountInFigures, bankName);
        return Ok(searchResults);
    }
}

// ============================================================================
// 6. MVC FRONTEND INTEGRATION
// ============================================================================

// 6.1 Cookie Authentication Configuration for MVC
public void ConfigureServices(IServiceCollection services)
{
    services.AddAuthentication()
        .AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>
        {
            options.LoginPath = new PathString("/Account/Login");
            options.AccessDeniedPath = new PathString("/Account/Forbidden");
            options.ExpireTimeSpan = TimeSpan.FromMinutes(30); // Session timeout
            options.SlidingExpiration = true; // Extend session on activity
        });
}

// 6.2 MVC Account Controller
public class AccountController : Controller
{
    private readonly string _apiBaseUrl = "https://localhost:7075/api/";

    public IActionResult Index()
    {
        return RedirectToAction("Login");
    }

    [HttpGet]
    public IActionResult Login()
    {
        return View();
    }

    [HttpPost]
    public async Task<IActionResult> Login(LoginRequestDto loginRequest)
    {
        try
        {
            using var httpClient = new HttpClient();
            using var response = await httpClient.PostAsJsonAsync($"{_apiBaseUrl}Authentication/Login", loginRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadAsStringAsync();
                var tokenData = JsonConvert.DeserializeObject<TokenResponseDto>(tokenResponse);

                var jwtTokenHandler = new JwtSecurityTokenHandler();
                var decodedToken = jwtTokenHandler.ReadToken(tokenData.Token) as JwtSecurityToken;

                if (decodedToken != null)
                {
                    var userName = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
                    var userRole = decodedToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

                    var userClaims = new List<Claim>
                    {
                        new(ClaimTypes.Name, userName ?? ""),
                        new(ClaimTypes.Role, userRole ?? ""),
                    };

                    var claimsIdentity = new ClaimsIdentity(userClaims, CookieAuthenticationDefaults.AuthenticationScheme);

                    // Sign in user with cookie authentication
                    await HttpContext.SignInAsync(
                        CookieAuthenticationDefaults.AuthenticationScheme, 
                        new ClaimsPrincipal(claimsIdentity));

                    // Store additional data in cookies for easy access
                    Response.Cookies.Append("UserName", userName ?? "");
                    Response.Cookies.Append("UserRole", userRole ?? "");
                    Response.Cookies.Append("JwtToken", tokenData.Token);

                    return RedirectToAction("Index", "Home");
                }
            }
        }
        catch (Exception ex)
        {
            // Log exception in real application
            ModelState.AddModelError("", $"Login failed: {ex.Message}");
        }

        ModelState.AddModelError("", "Invalid username or password");
        return View(loginRequest);
    }

    [HttpPost]
    public async Task<IActionResult> Logout()
    {
        // Sign out user
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);

        // Clear all authentication cookies
        Response.Cookies.Delete("UserName");
        Response.Cookies.Delete("UserRole");
        Response.Cookies.Delete("JwtToken");

        return RedirectToAction("Login");
    }

    public IActionResult Forbidden()
    {
        return View();
    }
}

// 6.3 Token Response DTO
public class TokenResponseDto
{
    public string Token { get; set; }
}

// 6.4 HTTP Client with JWT Token
private async Task<HttpClient> CreateAuthenticatedHttpClient()
{
    var httpClient = new HttpClient();
    var jwtToken = HttpContext.Request.Cookies["JwtToken"];
    
    if (!string.IsNullOrEmpty(jwtToken))
    {
        httpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", jwtToken);
    }
    
    return httpClient;
}

// 6.5 Example MVC Controller consuming API
public class ProductsController : Controller
{
    private readonly string _apiBaseUrl = "https://localhost:7075/api/";

    /// <summary>
    /// Display list of products
    /// </summary>
    public async Task<IActionResult> Index()
    {
        using var httpClient = await CreateAuthenticatedHttpClient();
        using var response = await httpClient.GetAsync($"{_apiBaseUrl}Products");
        
        if (response.IsSuccessStatusCode)
        {
            var jsonContent = await response.Content.ReadAsStringAsync();
            var products = JsonConvert.DeserializeObject<List<ProductDto>>(jsonContent);
            return View(products ?? new List<ProductDto>());
        }

        return View(new List<ProductDto>());
    }

    /// <summary>
    /// Get product details for editing
    /// </summary>
    [HttpGet]
    public async Task<IActionResult> Edit(int id)
    {
        using var httpClient = await CreateAuthenticatedHttpClient();
        using var response = await httpClient.GetAsync($"{_apiBaseUrl}Products/{id}");
        
        if (response.IsSuccessStatusCode)
        {
            var jsonContent = await response.Content.ReadAsStringAsync();
            var product = JsonConvert.DeserializeObject<ProductDto>(jsonContent);
            
            if (product != null)
            {
                // Populate dropdown lists if needed
                ViewData["CategoryId"] = new SelectList(await GetCategoriesAsync(), "Id", "Name", product.CategoryId);
                return View(product);
            }
        }

        return NotFound();
    }

    /// <summary>
    /// Update product
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Edit(int id, UpdateProductDto updateProductDto)
    {
        if (!ModelState.IsValid)
        {
            return View(updateProductDto);
        }

        using var httpClient = await CreateAuthenticatedHttpClient();
        using var response = await httpClient.PutAsJsonAsync($"{_apiBaseUrl}Products/{id}", updateProductDto);
        
        if (response.IsSuccessStatusCode)
        {
            var jsonContent = await response.Content.ReadAsStringAsync();
            var rowsAffected = JsonConvert.DeserializeObject<int>(jsonContent);
            
            if (rowsAffected > 0)
            {
                TempData["SuccessMessage"] = "Product updated successfully";
                return RedirectToAction(nameof(Index));
            }
        }

        ModelState.AddModelError("", "Failed to update product");
        return View(updateProductDto);
    }

    /// <summary>
    /// Delete product
    /// </summary>
    [HttpPost]
    public async Task<IActionResult> Delete(int id)
    {
        using var httpClient = await CreateAuthenticatedHttpClient();
        using var response = await httpClient.DeleteAsync($"{_apiBaseUrl}Products/{id}");
        
        if (response.IsSuccessStatusCode)
        {
            TempData["SuccessMessage"] = "Product deleted successfully";
        }
        else
        {
            TempData["ErrorMessage"] = "Failed to delete product";
        }

        return RedirectToAction(nameof(Index));
    }
}

// ============================================================================
// 7. AJAX & JAVASCRIPT INTEGRATION
// ============================================================================

/* 7.1 Complete AJAX CRUD Operations Example */

// HTML Table Structure
/*
<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Products Management</h2>
        <button type="button" class="btn btn-success" onclick="openCreateModal();">
            <i class="fas fa-plus"></i> Add New Product
        </button>
    </div>

    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="productsTableBody">
            <!-- Data will be loaded here via AJAX -->
        </tbody>
    </table>
</div>
*/

// JavaScript AJAX Functions
/*
<script type="text/javascript">
    const API_BASE_URL = 'https://localhost:7075/api/';
    
    // Document ready function
    $(document).ready(function () {
        loadProductsData();
    });
    
    // Load all products
    function loadProductsData() {
        $.ajax({
            url: API_BASE_URL + 'Products',
            type: 'GET',
            contentType: 'application/json;charset=utf-8',
            dataType: 'json',
            headers: {
                'Authorization': 'Bearer ' + getCookie('JwtToken')
            },
            success: function (products) {
                console.log('Products loaded successfully:', products);
                renderProductsTable(products);
            },
            error: function (xhr, status, error) {
                console.error('Error loading products:', error);
                alert('Failed to load products: ' + xhr.responseText);
            }
        });
    }
    
    // Render products in table
    function renderProductsTable(products) {
        let tableHtml = '';
        
        $.each(products, function (index, product) {
            tableHtml += '<tr>';
            tableHtml += '<td>' + product.id + '</td>';
            tableHtml += '<td>' + product.name + '</td>';
            tableHtml += '<td>$' + product.price.toFixed(2) + '</td>';
            tableHtml += '<td>' + product.categoryName + '</td>';
            tableHtml += '<td>' + 
                         '<span class="badge bg-' + (product.isActive ? 'success' : 'danger') + '">' +
                         (product.isActive ? 'Active' : 'Inactive') + '</span></td>';
            tableHtml += '<td>' +
                         '<button type="button" class="btn btn-sm btn-primary me-1" onclick="viewProductDetails(' + product.id + ')">' +
                         '<i class="fas fa-eye"></i> View</button>' +
                         '<button type="button" class="btn btn-sm btn-warning me-1" onclick="editProduct(' + product.id + ')">' +
                         '<i class="fas fa-edit"></i> Edit</button>' +
                         '<button type="button" class="btn btn-sm btn-danger" onclick="deleteProduct(' + product.id + ', \'' + product.name + '\')">' +
                         '<i class="fas fa-trash"></i> Delete</button>' +
                         '</td>';
            tableHtml += '</tr>';
        });
        
        $('#productsTableBody').html(tableHtml);
    }
    
    // Create new product
    function createProduct() {
        const productData = {
            name: $('#productName').val(),
            description: $('#productDescription').val(),
            price: parseFloat($('#productPrice').val()),
            categoryId: parseInt($('#categoryId').val()),
            isActive: $('#isActive').is(':checked')
        };
        
        $.ajax({
            type: 'POST',
            url: API_BASE_URL + 'Products',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json; charset=utf-8',
                'Authorization': 'Bearer ' + getCookie('JwtToken')
            },
            data: JSON.stringify(productData),
            success: function (result) {
                console.log('Product created successfully:', result);
                if (result > 0) {
                    $('#productModal').modal('hide');
                    loadProductsData(); // Refresh the table
                    showSuccessMessage('Product created successfully!');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error creating product:', error);
                alert('Failed to create product: ' + xhr.responseText);
            }
        });
    }
    
    // Edit product
    function editProduct(productId) {
        // First, get the product data
        $.ajax({
            url: API_BASE_URL + 'Products/' + productId,
            type: 'GET',
            headers: {
                'Authorization': 'Bearer ' + getCookie('JwtToken')
            },
            success: function (product) {
                // Populate form with existing data
                $('#productId').val(product.id);
                $('#productName').val(product.name);
                $('#productDescription').val(product.description);
                $('#productPrice').val(product.price);
                $('#categoryId').val(product.categoryId);
                $('#isActive').prop('checked', product.isActive);
                
                // Change modal title and button text
                $('#productModalLabel').text('Edit Product');
                $('#saveProductButton').text('Update Product');
                
                // Show modal
                $('#productModal').modal('show');
            },
            error: function (xhr, status, error) {
                alert('Failed to load product data: ' + xhr.responseText);
            }
        });
    }
    
    // Update product
    function updateProduct() {
        const productId = $('#productId').val();
        const productData = {
            name: $('#productName').val(),
            description: $('#productDescription').val(),
            price: parseFloat($('#productPrice').val()),
            categoryId: parseInt($('#categoryId').val()),
            isActive: $('#isActive').is(':checked')
        };
        
        $.ajax({
            type: 'PUT',
            url: API_BASE_URL + 'Products/' + productId,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json; charset=utf-8',
                'Authorization': 'Bearer ' + getCookie('JwtToken')
            },
            data: JSON.stringify(productData),
            success: function (result) {
                console.log('Product updated successfully:', result);
                if (result > 0) {
                    $('#productModal').modal('hide');
                    loadProductsData(); // Refresh the table
                    showSuccessMessage('Product updated successfully!');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error updating product:', error);
                alert('Failed to update product: ' + xhr.responseText);
            }
        });
    }
    
    // Delete product
    function deleteProduct(productId, productName) {
        if (confirm('Are you sure you want to delete the product "' + productName + '"?')) {
            $.ajax({
                type: 'DELETE',
                url: API_BASE_URL + 'Products/' + productId,
                headers: {
                    'Authorization': 'Bearer ' + getCookie('JwtToken')
                },
                success: function () {
                    console.log('Product deleted successfully');
                    loadProductsData(); // Refresh the table
                    showSuccessMessage('Product deleted successfully!');
                },
                error: function (xhr, status, error) {
                    console.error('Error deleting product:', error);
                    alert('Failed to delete product: ' + xhr.responseText);
                }
            });
        }
    }
    
    // Utility function to get cookie value
    function getCookie(cookieName) {
        const name = cookieName + "=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookieArray = decodedCookie.split(';');
        
        for (let i = 0; i < cookieArray.length; i++) {
            let cookie = cookieArray[i];
            while (cookie.charAt(0) === ' ') {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) === 0) {
                return cookie.substring(name.length, cookie.length);
            }
        }
        return "";
    }
    
    // Show success message
    function showSuccessMessage(message) {
        // You can implement a toast notification here
        alert(message);
    }
    
    // Modal functions
    function openCreateModal() {
        // Clear form
        $('#productForm')[0].reset();
        $('#productId').val('');
        
        // Set modal title and button text for create
        $('#productModalLabel').text('Add New Product');
        $('#saveProductButton').text('Create Product');
        
        // Show modal
        $('#productModal').modal('show');
    }
    
    function saveProduct() {
        const productId = $('#productId').val();
        
        if (productId) {
            updateProduct(); // Edit existing product
        } else {
            createProduct(); // Create new product
        }
    }
    
    // Search functionality
    function searchProducts() {
        const searchTerm = $('#searchInput').val().toLowerCase();
        
        $('#productsTableBody tr').filter(function() {
            $(this).toggle($(this).text().toLowerCase().indexOf(searchTerm) > -1);
        });
    }
</script>
*/

// ============================================================================
// 8. HTML FORMS & UI COMPONENTS
// ============================================================================

/* 8.1 Login Form */
/*
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Login" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                        
                        <div class="mb-3">
                            <label asp-for="UserName" class="form-label">Username</label>
                            <input asp-for="UserName" class="form-control" required />
                            <span asp-validation-for="UserName" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Password" class="form-label">Password</label>
                            <input asp-for="Password" type="password" class="form-control" required />
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
*/

/* 8.2 Search Form */
/*
<form asp-action="Index" method="get" class="mb-4">
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">Product Name</label>
            <input type="text" name="productName" class="form-control" 
                   placeholder="Enter product name" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Category</label>
            <select name="categoryId" class="form-select">
                <option value="">All Categories</option>
                <!-- Options will be populated from ViewBag -->
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Price Range</label>
            <input type="number" name="minPrice" class="form-control" 
                   placeholder="Min price" step="0.01" />
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn btn-success me-2">
                <i class="fas fa-search"></i> Search
            </button>
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add New
            </a>
        </div>
    </div>
</form>
*/

/* 8.3 Bootstrap Modal for Create/Edit */
/*
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="productForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="productId" name="productId" />
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input type="text" id="productName" name="productName" class="form-control" required />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="productPrice" class="form-label">Price <span class="text-danger">*</span></label>
                            <input type="number" id="productPrice" name="productPrice" class="form-control" 
                                   step="0.01" min="0" required />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                            <select id="categoryId" name="categoryId" class="form-select" required>
                                <option value="">Select Category</option>
                                <!-- Options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="isActive" class="form-label">Status</label>
                            <div class="form-check">
                                <input type="checkbox" id="isActive" name="isActive" class="form-check-input" />
                                <label for="isActive" class="form-check-label">Active</label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Description</label>
                        <textarea id="productDescription" name="productDescription" class="form-control" 
                                  rows="3" placeholder="Enter product description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="saveProductButton" class="btn btn-primary" onclick="saveProduct()">
                        Save Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
*/

/* 8.4 Navigation with User Info */
/*
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">My Application</a>
        
        <div class="navbar-nav me-auto">
            <a class="nav-link" asp-controller="Products" asp-action="Index">Products</a>
            <a class="nav-link" asp-controller="Categories" asp-action="Index">Categories</a>
        </div>
        
        <div class="navbar-nav">
            <div class="nav-item text-nowrap">
                <span class="text-success">
                    Welcome <strong>@Context.Request.Cookies["UserName"]</strong>
                    | <a asp-controller="Account" asp-action="Logout" class="text-danger">Logout</a>
                </span>
            </div>
        </div>
    </div>
</nav>
*/

/* 8.5 Forbidden Access Page */
/*
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <div class="card">
                <div class="card-body">
                    <h3 class="text-danger">Access Forbidden</h3>
                    <h4 class="text-danger">You do not have permission to access this resource!</h4>
                    <div class="mt-3">
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary">Login</a>
                        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Home</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
*/

// ============================================================================
// 9. USEFUL PATTERNS & UTILITIES
// ============================================================================

// 9.1 Input Validation Patterns
/*
Name validation (letters only): ^\s*[A-Z][a-zA-Z]*\s*$
Email validation: ^[^\s@]+@[^\s@]+\.[^\s@]+$
Phone validation: ^\+?[\d\s\-\(\)]+$
*/

// 9.2 Date Handling
/*
For date inputs, use appropriate types:
<input type="datetime-local" id="createdDate" name="createdDate" class="form-control" />
<input type="date" id="birthDate" name="birthDate" class="form-control" />
*/

// 9.3 Model Binding Example
/*
[ApiController]
[Route("api/[controller]")]
public class ExampleController : ControllerBase
{
    [HttpGet("{id:int}")]           // Only matches integers
    [HttpGet("{code:alpha}")]       // Only matches alphabetic strings
    [HttpGet("{date:datetime}")]    // Only matches datetime format
    public IActionResult Get(string parameter) { ... }
}
*/

/*
================================================================================
END OF .NET API DEVELOPMENT NOTES
================================================================================
Remember to:
1. Always validate input data
2. Use HTTPS in production
3. Implement proper error handling
4. Log important events
5. Use dependency injection
6. Follow REST API conventions
7. Implement proper authentication and authorization
8. Use appropriate HTTP status codes
9. Validate and sanitize user inputs
10. Keep your JWT secret keys secure

Happy coding! 🚀
================================================================================
*/

GraphQL

query {
  allAppointments {
    appointmentsTienDmid
    contactPhone
    totalAmount
    appointmentDate
    createdDate
    appointmentStatusesTienDm {
      appointmentStatusesTienDmid
      statusName
      isActive
    }
    servicesNhanVt {
      servicesNhanVtid
      serviceName
      price
    }
    userAccount {
      userAccountId
      userName
      email
    }
  }
}
